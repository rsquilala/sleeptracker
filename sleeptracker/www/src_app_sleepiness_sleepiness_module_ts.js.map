{"version":3,"file":"src_app_sleepiness_sleepiness_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEJ;AAEnD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,4DAAc;KAC1B;CACF,CAAC;IAMW,2BAA2B,SAA3B,2BAA2B;;AAA3B,2BAA2B;IAJvC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,2BAA2B;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChBC;AACM;AACF;AAEA;AAE6B;AAEvB;IAWtC,oBAAoB,SAApB,oBAAoB;;AAApB,oBAAoB;IAThC,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,mFAA2B;SAC5B;QACD,YAAY,EAAE,CAAC,4DAAc,CAAC;KAC/B,CAAC;GACW,oBAAoB;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACnBmC;AACM;AACzB;AACQ;AACf;IAO7B,cAAc,SAAd,cAAc;IAIzB,YAAmB,YAAyB,EAAU,eAAgC;QAAnE,iBAAY,GAAZ,YAAY,CAAa;QAAU,oBAAe,GAAf,eAAe,CAAiB;QAH7E,gBAAW,GAAU,CAAC;IAG0D,CAAC;IAE1F,QAAQ,KAAI,CAAC;IAEb,YAAY,CAAC,KAAY;QACvB,OAAO,GAAG,KAAK,EAAE,CAAC;IACpB,CAAC;IAED,OAAO;QACL,IAAI,IAAI,GAAG,IAAI,kFAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAEK,MAAM,CAAC,SAAgC;;YAC3C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,MAAM,EAAE,oBAAoB;gBAC5B,OAAO,EAAE;oBACP;wBACE,IAAI,EAAE,QAAQ;wBACd,IAAI,EAAE,QAAQ;qBACf;oBACD;wBACE,IAAI,EAAE,SAAS;wBACf,IAAI,EAAE,QAAQ;qBACf;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YAEtB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,YAAY,EAAE,CAAC;YAE5C,IAAI,IAAI,IAAI,QAAQ;gBAAE,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAC1E,CAAC;KAAA;IAEK,WAAW,CAAC,WAAkB;;YAClC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC;gBAC9C,MAAM,EAAE,eAAe,WAAW,EAAE;gBACpC,OAAO,EAAE,8FAAkC,CAAC,WAAW,CAAC;gBACxD,OAAO,EAAE,CAAC,IAAI,CAAC;aAChB,CAAC,CAAC;YAEH,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;KAAA;IAEF,IAAI,iBAAiB;QACpB,OAAO,mFAA8B,CAAC;IACvC,CAAC;;;;;;;0BAnDC,gDAAK;oBACL,oDAAS,SAAC,oDAAQ;;AAFR,cAAc;IAL1B,wDAAS,CAAC;QACT,QAAQ,EAAE,gBAAgB;QAC1B,uEAAqC;;KAEtC,CAAC;GACW,cAAc;AAAA","sources":["./src/app/sleepiness/sleepiness-routing.module.ts","./src/app/sleepiness/sleepiness.module.ts","./src/app/sleepiness/sleepiness.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SleepinessPage } from './sleepiness.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SleepinessPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SleepinessPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SleepinessPageRoutingModule } from './sleepiness-routing.module';\n\nimport { SleepinessPage } from './sleepiness.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SleepinessPageRoutingModule\n  ],\n  declarations: [SleepinessPage]\n})\nexport class SleepinessPageModule {}\n","import { Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { StanfordSleepinessData } from '../data/stanford-sleepiness-data';\nimport { AlertController } from '@ionic/angular';\nimport { SleepService } from '../services/sleep.service';\nimport { IonModal } from '@ionic/angular';\n\n@Component({\n  selector: 'app-sleepiness',\n  templateUrl: './sleepiness.page.html',\n  styleUrls: ['./sleepiness.page.scss'],\n})\nexport class SleepinessPage implements OnInit {\n  @Input() loggedValue:number = 1;\n  @ViewChild(IonModal) modal: IonModal;\n\n  constructor(public sleepService:SleepService, private alertController: AlertController) {}\n\n  ngOnInit() {}\n\n  pinFormatter(value:number) {\n    return `${value}`;\n  }\n\n  confirm() {\n    var data = new StanfordSleepinessData(this.loggedValue);\n    this.sleepService.logSleepinessData(data);\n    this.modal.dismiss();\n  }\n\n  async remove(sleepData:StanfordSleepinessData) {\n    const alert = await this.alertController.create({\n      header: 'Delete this entry?',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel'\n        },\n        {\n          text: 'Confirm',\n          role: 'delete'\n        }\n      ],\n    });\n\n    await alert.present();\n\n    const { role } = await alert.onDidDismiss();\n\n    if (role == 'delete') this.sleepService.removeSleepinessData(sleepData);\n  }\n\n  async presentInfo(loggedValue:number) {\n    const alert = await this.alertController.create({\n      header: `Sleepiness: ${loggedValue}`,\n      message: StanfordSleepinessData.ScaleValues[loggedValue],\n      buttons: ['OK'],\n    });\n\n    await alert.present();\n  }\n\n\tget allSleepinessData() {\n\t\treturn SleepService.AllSleepinessData;\n\t}\n\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}